use ecommerce;

-- Basic Queries
-- 1. List all unique cities where customers are located.
SELECT DISTINCT(customer_city)
FROM customers;

-- 2. Count the number of orders placed in 2017.
SELECT * 
FROM ORDERS
WHERE Year(order_purchase_timestamp)  LIKE '2017%';

SELECT count(order_id)
FROM orders
WHERE date(order_purchase_timestamp) BETWEEN '2017-01-01' AND '2017-12-31';

-- 3. Find the total sales per category.
SELECT  product_category,
		count(product_id) as total_sales
FROM produts
GROUP BY product_category
ORDER BY total_sales DESC;

-- 4. Calculate the percentage of orders that were paid in installments.
select ((sum(case WHEN payment_installments >= 1 THEN 1 else 0 end))/count(order_id)) * 100
from payments;
-- 5. Count the number of customers from each state.
select customer_state,
	   COUNT(customer_id) as num_of_customers
from customers
GROUP BY customer_state;

--- Intermediate Queries-------------------------------------------------------------------------------------------------------------------
-- 1. Calculate the number of orders per month in 2018.
SELECT  monthname(order_purchase_timestamp),
		count(order_id) as orders
FROM orders
WHERE date(order_purchase_timestamp) BETWEEN '2018-01-01' AND '2018-12-31'
GROUP BY monthname(order_purchase_timestamp);

-- 2. Find the average number of products per order, grouped by customer city.
WITH count_of_orders as
(SELECT o.order_id,
		o.customer_id,
        count(oi.order_id) as order_count
FROM orders o
INNER JOIN order_items oi on o.order_id = oi.order_id
GROUP BY o.order_id, o.customer_id)

SELECT c.customer_city,
		round(avg(co.order_count), 1) as average
from customers c 
JOIN count_of_orders co on c.customer_id = co.customer_id
GROUP BY c.customer_city
ORDER BY average DESC;
-- 3. Calculate the percentage of total revenue contributed by each product category.
select upper(produts.product_category) category, 
		round((sum(payments.payment_value)/(select sum(payment_value) from payments))*100,2) sales_percentage
from produts 
join order_items on produts.product_id = order_items.product_id
join payments on payments.order_id = order_items.order_id
group by category 
order by sales_percentage desc;

-- 4. Identify the correlation between product price and the number of times a product has been purchased.
SELECT  p.product_category,
		count(oi.product_id),
        round(avg(oi.price), 2)
from produts p
JOIN order_items oi on p.product_id = oi.product_id
GROUP BY p.product_category;

-- 5. Calculate the total revenue generated by each seller, and rank them by revenue.
WITH total_revenue (seller_id, revenue) AS (
	SELECT s.seller_id,
			p.payment_value as revenue
	FROM sellers s
	JOIN order_items oi on s.seller_id = oi.seller_id
	join payments p on p.order_id = oi.order_id)
SELECT  seller_id,
		round(sum(revenue), 2) as revenue,
		rank() over(ORDER BY sum(revenue) DESC) as rn
from total_revenue
GROUP BY seller_id;
-- ---------------------- ------------- ADVANCED --------------------------------------------------------------
 
-- 1. Calculate the moving average of order values for each customer over their order history.
select customer_id, 
	   order_purchase_timestamp, 
       payment,
		avg(payment) over(partition by customer_id order by order_purchase_timestamp rows between 2 preceding and current row) as mov_avg
from
(select o.customer_id, 
        o.order_purchase_timestamp, 
        p.payment_value as payment
from payments p 
join orders o on p.order_id = o.order_id) as a;


-- 2. Calculate the cumulative sales per month for each year.
WITH cumulative_sales (date_paid, payment) AS (
	SELECT date(o.order_purchase_timestamp),
			p.payment_value
	FROM payments p
    -- JOIN order_items oi ON p.order_id = oi.order_id
    JOIN orders o ON o.order_id = p.order_id)
select year(date_paid) AS year,
		monthname(date_paid) as month,
        round(sum(payment),2) as cum_sales
FROM cumulative_sales
GROUP BY year(date_paid), monthname(date_paid)
order by year asc, month asc;

-- 3. Calculate the year-over-year growth rate of total sales.
with yearly_sales as(
	select year(orders.order_purchase_timestamp) as years,
			round(sum(payments.payment_value),2) as payment 
	from orders 
    join payments on orders.order_id = payments.order_id
	group by years order by years)

select years, 
       round(((payment - lag(payment, 1) over(order by years))/
		lag(payment, 1) over(order by years)) * 100, 2)
from yearly_sales;
-- 4. Calculate the retention rate of customers, defined as the percentage of customers who make another purchase within 6 months of their first purchase.
with a as (select customers.customer_id,
min(orders.order_purchase_timestamp) first_order
from customers join orders
on customers.customer_id = orders.customer_id
group by customers.customer_id),

b as (select a.customer_id, count(distinct orders.order_purchase_timestamp) next_order
from a join orders
on orders.customer_id = a.customer_id
and orders.order_purchase_timestamp > first_order
and orders.order_purchase_timestamp < 
date_add(first_order, interval 6 month)
group by a.customer_id) 

select 100 * (count( distinct a.customer_id)/ count(distinct b.customer_id)) 
from a left join b 
on a.customer_id = b.customer_id;
-- 5. Identify the top 3 customers who spent the most money in each year.
WITH top_3_customer AS (
    SELECT year(o.order_purchase_timestamp) as year,
			c.customer_id,
			round(sum(p.payment_value), 2) as payment,
            DENSE_RANK() OVER(PARTITION BY year(o.order_purchase_timestamp) ORDER BY round(sum(p.payment_value), 2) DESC) as rnk
	FROM customers c
	JOIN orders o ON c.customer_id = o.customer_id
	JOIN payments p ON o.order_id = p.order_id
    GROUP BY year(o.order_purchase_timestamp), c.customer_id
    ORDER BY year ASC, payment DESC)
SELECT *
from top_3_customer
WHERE rnk <= 3;


